diff --git a/system/core/base/file.cpp b/system/core/base/file.cpp
index a2f28878e..82162eb45 100644
--- a/system/core/base/file.cpp
+++ b/system/core/base/file.cpp
@@ -42,6 +42,16 @@
 #define O_NOFOLLOW 0
 #endif
 
+#if defined(__GENODE__)
+
+// For strrchr
+#include <string.h>
+
+// For program name
+extern char **genode_argv;
+extern int    genode_argc;
+#endif
+
 namespace android {
 namespace base {
 
@@ -251,6 +261,11 @@ std::string GetExecutablePath() {
   if (result == 0 || result == sizeof(path) - 1) return "";
   path[PATH_MAX - 1] = 0;
   return path;
+#elif defined(__GENODE__)
+  if (::genode_argc > 0) {
+    return ::genode_argv[0];
+  }
+  return "/main";
 #else
 #error unknown OS
 #endif
diff --git a/system/core/base/include/android-base/endian.h b/system/core/base/include/android-base/endian.h
index 6eb677cd3..2fba9cbc9 100644
--- a/system/core/base/include/android-base/endian.h
+++ b/system/core/base/include/android-base/endian.h
@@ -23,6 +23,26 @@
 
 #include <sys/endian.h>
 
+#elif defined(__GENODE__)
+
+#include <sys/endian.h>
+#include <netinet/in.h>
+
+#define htonq(x) htobe64(x)
+#define ntohq(x) be64toh(x)
+
+#define __LITTLE_ENDIAN _LITTLE_ENDIAN
+#define __BIG_ENDIAN _BIG_ENDIAN
+#define __BYTE_ORDER _BYTE_ORDER
+
+#define betoh16(x) be16toh(x)
+#define betoh32(x) be32toh(x)
+#define betoh64(x) be64toh(x)
+
+#define letoh16(x) (x)
+#define letoh32(x) (x)
+#define letoh64(x) (x)
+
 #elif defined(__GLIBC__)
 
 /* glibc's <endian.h> is like bionic's <sys/endian.h>. */
diff --git a/system/core/base/include/android-base/errors.h b/system/core/base/include/android-base/errors.h
index 04c299c86..7653fb986 100644
--- a/system/core/base/include/android-base/errors.h
+++ b/system/core/base/include/android-base/errors.h
@@ -32,6 +32,10 @@
 
 #include <string>
 
+#ifdef __GENODE__
+#include <string.h>
+#endif
+
 namespace android {
 namespace base {
 
diff --git a/system/core/base/include/android-base/file.h b/system/core/base/include/android-base/file.h
index 651f52962..064292345 100644
--- a/system/core/base/include/android-base/file.h
+++ b/system/core/base/include/android-base/file.h
@@ -24,6 +24,10 @@
 #define O_BINARY 0
 #endif
 
+#if !defined(_WIN32) && !defined(O_CLOEXEC)
+#define O_CLOEXEC 0
+#endif
+
 namespace android {
 namespace base {
 
diff --git a/system/core/base/logging.cpp b/system/core/base/logging.cpp
index 6357b4ba7..b7962682a 100644
--- a/system/core/base/logging.cpp
+++ b/system/core/base/logging.cpp
@@ -70,6 +70,11 @@
 #include <windows.h>
 #endif
 
+// For strrchr
+#if defined(__GENODE__)
+#include <string.h>
+#endif
+
 #if defined(_WIN32)
 typedef uint32_t thread_id;
 #else
diff --git a/system/core/base/logging_test.cpp b/system/core/base/logging_test.cpp
index adb041b32..40b6c16f1 100644
--- a/system/core/base/logging_test.cpp
+++ b/system/core/base/logging_test.cpp
@@ -37,6 +37,10 @@
 #define HOST_TEST(suite, name) TEST(suite, name)
 #endif
 
+#ifdef __GENODE__
+#define ASSERT_DEATH(u1,u2)
+#endif
+
 #if defined(_WIN32)
 static void ExitSignalAbortHandler(int) {
   _exit(3);
diff --git a/system/core/base/quick_exit.cpp b/system/core/base/quick_exit.cpp
index e4dd62bfb..577077233 100644
--- a/system/core/base/quick_exit.cpp
+++ b/system/core/base/quick_exit.cpp
@@ -21,6 +21,11 @@
 #include <mutex>
 #include <vector>
 
+// _Exit() is available in C99 only
+#ifdef __GENODE__
+#define _Exit(x) exit(x)
+#endif
+
 namespace android {
 namespace base {
 
diff --git a/system/core/base/quick_exit_test.cpp b/system/core/base/quick_exit_test.cpp
index 7ca8156ac..b327b7516 100644
--- a/system/core/base/quick_exit_test.cpp
+++ b/system/core/base/quick_exit_test.cpp
@@ -26,6 +26,8 @@
 
 #include "android-base/test_utils.h"
 
+#ifndef __GENODE__
+
 // These tests are a bit sketchy, since each test run adds global state that affects subsequent
 // tests (including ones not in this file!). Exit with 0 in Exiter and stick the at_quick_exit test
 // at the end to hack around this.
@@ -52,3 +54,4 @@ TEST(quick_exit, at_quick_exit) {
   ASSERT_EQ(0, android::base::at_quick_exit([]() { counter *= 10; }));
   ASSERT_EXIT(android::base::quick_exit(123), testing::ExitedWithCode(42), "");
 }
+#endif // __GENODE__
