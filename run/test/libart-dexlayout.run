#
# Build
#

set build_components {
	core init
	drivers/timer
	drivers/rtc
	server/ram_fs
	test/build-rm
	test/build-diff
	test/build-dexdump2
	test/build-unzip
	app/dummy-dexlayout
	test/libart-dexlayout
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components
build $build_components
create_boot_directory

#
# Generate config
#

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="CAP"/>
		<service name="RM"/>
		<service name="PD"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="500"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

<!--
	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>
-->

	<start name="ram_fs">
		<resource name="RAM" quantum="1000M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<default-policy root="/" writeable="true" />
		</config>
	</start>

	<start name="libart-dexlayout_test">
		<resource name="RAM" quantum="1000MB"/>
		<config ld_bind_now="no">
			<vfs>
				<dir name="tmp"> <fs/> </dir>
				<dir name="dev">
					<log/>
					<rtc/>
					<null/>
				</dir>
				<dir name="android">
					<dir name="framework">
						<tar name="framework.tar"/>
					</dir>
				</dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" />
		</config>
	</start>
</config>}

# Create Android framework tarball

if {![info exists ::env(ANDROID_FRAMEWORK_DIR)]} {
	puts "\nPlease set ANDROID_FRAMEWORK_DIR environment variable.\n"
	exit 0
}

puts "\nexec tar cfv bin/framework.tar -h -C $::env(ANDROID_FRAMEWORK_DIR) *.jar\n"
exec tar cfv bin/framework.tar -h -C $::env(ANDROID_FRAMEWORK_DIR) core-oj-hostdex.jar core-libart-hostdex.jar

#
# Boot image
#

# generic modules
set boot_modules {
	core init ld.lib.so
	timer ram_fs
	rtc_drv
	libc.lib.so libm.lib.so
	unwind.lib.so
	cxxthreads.lib.so
	posix.lib.so pthread.lib.so stdcxx.lib.so
	lwip.lib.so
	liblog.lib.so libbase.lib.so libutils.lib.so libcutils.lib.so
	libbacktrace.lib.so icu.lib.so
	libart.lib.so liblz4.lib.so libnativebridge.lib.so
	libnativehelper.lib.so libnativeloader.lib.so
	libutils.lib.so zlib.lib.so libziparchive.lib.so
	libsigchain.lib.so
	libsilence.lib.so
	libz.lib.so
	libart-dexlayout.lib.so
	rm.lib.so
	diff.lib.so
	dexdump2.lib.so
	dexlayout.lib.so
	unzip.lib.so
	framework.tar
	libart-dexlayout_test
}

append_platform_drv_boot_modules
build_boot_image $boot_modules

append qemu_args " -m 3000 -nographic "
run_genode_until {.*child "libart-dexlayout-test" exited with exit value 0} 1000
