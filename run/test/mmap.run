#
# Build
#

set build_components {
	core init
	drivers/timer
	drivers/rtc
	lib/vfs/cow
	server/vfs
	test/mmap_fixed
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components
build $build_components
create_boot_directory

#
# Generate config
#

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="CAP"/>
		<service name="RM"/>
		<service name="PD"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>

	<start name="vfs">
		<resource name="RAM" quantum="128M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
            <vfs>
				<dir name="immutable">
					<rom name="test.dat"/>
				</dir>
				<dir name="mutable">
					<ram/>
				</dir>
				<dir name="cow">
					<cow ro="/immutable" rw="/mutable"/>
				</dir>
            </vfs>
			<default-policy root="/cow" writeable="true" />
		</config>
	</start>

	<start name="test_mmap">
		<resource name="RAM" quantum="32M"/>
		<config>
            <argv progname="test_mmap">
                <arg value="test"/>
            </argv>
			<vfs>
				<dir name="dev"> <log/> <rtc/> </dir>
                <fs/>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc" />
		</config>
	</start>
</config>}

# copy test data
exec cp [genode_dir]/repos/componolit/src/test/mmap_fixed/test.dat bin/

#
# Boot image
#

# generic modules
set boot_modules {
	core init ld.lib.so
	timer vfs
	libc.lib.so libm.lib.so
	libargv.lib.so
	zlib.lib.so
	vfs_cow.lib.so
	rtc_drv
	test_mmap
    test.dat
}

append_platform_drv_boot_modules
build_boot_image $boot_modules

append qemu_args " -m 512 -nographic "
run_genode_until {.*child "test_mmap" exited with exit value 0} 100
