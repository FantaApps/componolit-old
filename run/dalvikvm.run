set build_components {
	core
	init
	drivers/timer
	drivers/uart
	app/gdb_monitor
	app/dalvikvm
	app/dummy-libart
}

lappend build_components "lib/gdbserver_platform-$::env(KERNEL)"

source ${genode_dir}/repos/base/run/platform_drv.inc

append_platform_drv_build_components
build $build_components
create_boot_directory

#
# Generate config
#

append config {

<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

    <start name="uart_drv">
        <resource name="RAM" quantum="2M"/>
        <provides>
            <service name="Terminal"/>
            <service name="Uart"/>
        </provides>
        <config>
            <policy label_prefix="gdb_monitor" uart="1"/>
        </config>
    </start>

<!--
	<start name="gdb_monitor" caps="1200">
		<resource name="RAM" quantum="180MB"/>
		<config>
			<target name="dalvikvm">
				<config>
					<libc stdout="/dev/log" stderr="/dev/log"/>
					<vfs>
						<dir name="dev"> <log/> </dir>
					</vfs>
				</config>
			</target>
            <preserve name="RAM" quantum="3M"/>
            <vfs> <dir name="dev"> <log/> </dir> </vfs>
            <libc stdout="/dev/log" stderr="/dev/log"/>
		</config>
	</start>
-->

	<start name="dalvikvm" caps="1000">
		<resource name="RAM" quantum="128M"/>
		<config>
			<libc stdout="/dev/log" stderr="/dev/log"/>
			<vfs>
				<dir name="dev"> <log/> </dir>
			</vfs>
		</config>
	</start>

</config>}

install_config $config

proc binary_name_libart_so { } {
	return "libart.lib.so"
}

#
# Boot modules
#

# evaluated by the run tool
proc binary_name_gdbserver_platform_lib_so { } {
    return "gdbserver_platform-$::env(KERNEL).lib.so"
}

# generic modules
set boot_modules {
	core init timer
	ld.lib.so
	libc.lib.so libc_pipe.lib.so libc_terminal.lib.so
	libm.lib.so
	stdcxx.lib.so pthread.lib.so
	libnativehelper.lib.so liblog.lib.so
	icu.lib.so libbacktrace.lib.so
	libbase.lib.so libcutils.lib.so
	lwip.lib.so posix.lib.so
	libfakeatomic.lib.so liblz4.lib.so
	libnativebridge.lib.so
	libnativeloader.lib.so
	libutils.lib.so
	libziparchive.lib.so
	sigchainlib.lib.so
	zlib.lib.so
	libart.lib.so 
	libart.so 
	dalvikvm
	gdb_monitor
	gdbserver_platform.lib.so
	uart_drv
}

append_platform_drv_boot_modules
build_boot_image $boot_modules

set local_port 5555

# qemu config
append qemu_args "  -nographic "

# connect comport 0 to stdio
append qemu_args " -serial mon:stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "

append qemu_args " -m 1024 "

run_genode_until forever
