#!/usr/bin/env python3

# TODO
#
# - Variable use
# - Concatenation

import sys
import argparse
import unittest

from pyparsing import *

class Soong:

    def __init__ (self, basedir = '.'):
        self._data    = {'variables': {}, 'sections': []}
        self._basedir = basedir

        name  = Word (alphanums + "_")
        colon = Literal (':')
        comma = Literal (',')

        # String
        string = QuotedString ('"', escChar='\\').setParseAction (lambda s, l, t: t[0])

        # List of strings
        stringlist = Literal ("[") + Optional (delimitedList (string)) + Optional (comma) + Literal ("]")
        stringlist.setParseAction (self.stringlistAction)

        # Element
        data = stringlist | string
        data.setParseAction (self.dataAction)

        # Element inside a section
        dictelem = name + colon + data
        dictelem.setParseAction (self.dictelemAction)

        # Section (unnamed)
        section = Literal ("{") + delimitedList (dictelem) + Optional (comma) + Literal ("}")
        section.setParseAction (self.sectionAction)

        # Named section
        namedsection = name + section
        namedsection.setParseAction (self.namedsectionAction)

        # Variable
        variable = name + Literal ("=") + data
        variable.setParseAction (self.variableAction)

        # Soong file
        self._grammar = ZeroOrMore (namedsection | Suppress (variable)) + StringEnd()
        self._grammar.setParseAction (self.soongAction)

        # C and C++ style comments
        self._grammar.ignore (cppStyleComment | cStyleComment)

    def variableAction (self, string, location, tokens):
        self.variables()[tokens[0]] = tokens[2]

    def stringlistAction (self, string, location, tokens):
        last = -2 if tokens[-2] == ',' else -1
        return [tokens[1:last]]

    def dataAction (self, string, location, tokens):
        return tokens

    def dictelemAction (self, string, location, tokens):
        return (tokens[0], tokens[2])

    def sectionAction (self, string, location, tokens):
        result = {}
        last = -2 if tokens[-2] == ',' else -1
        for token in tokens[1:last]:
            result[token[0]] = token[1]
        return result

    def namedsectionAction (self, string, location, tokens):
        return (tokens[0], tokens[1])

    def soongAction (self, string, location, tokens):
        self._data['sections'].extend (tokens)

    def parse (self, infile):
        with open (infile, 'r') as f:
            self._grammar.parseFile (f)

    def data (self):
        return self._data['sections']

    def variables (self):
        return self._data['variables']

class TestSoong (unittest.TestCase):

    def setUp (self):
        self.testdir = "tests/soong2mk"

    def test_empty_input (self):
        """
        Parsing an empty file must yield an empty list.
        """
        infile = self.testdir + "/001_empty_file.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertFalse (soong.data())

    def test_cpp_comment_only (self):
        """
        Parsing a file with only a C++ style comment must yield an empty list.
        """
        infile = self.testdir + "/002_cpp_comment_only.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertFalse (soong.data())

    def test_c_comment_only (self):
        """
        Parsing a file with only a C style comment must yield an empty list.
        """
        infile = self.testdir + "/003_c_comment_only.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertFalse (soong.data())

    def test_mixed_comment_only (self):
        """
        Parsing a file with only C and C++ style comments must yield an empty list.
        """
        infile = self.testdir + "/004_mixed_comment_only.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertFalse (soong.data())

    def test_single_empty_section (self):
        """
        An empty section must raise an exception
        """
        infile = self.testdir + "/005_single_empty_section.bp"
        soong = Soong()
        try:
            soong.parse (infile)
        except Exception:
            return
        self.fail("Empty section not detected")

    def test_single_simple_section (self):
        """
        An single section mapping a name to a scalar string value must result in
        a dict mapping that section name to dict. This dict must contain only that
        element name which is mapped to the correct string value.
        """
        infile = self.testdir + "/006_single_simple_section.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.data(), [('section2', {'foo': 'bar'})])

    def test_trailing_comma (self):
        """
        A section with multiple elements where the last element has a trailing
        comma (without a further element) must be parsed correctly.
        """
        infile = self.testdir + "/007_trailing_comma.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.data(), [('section3', {'element1': 'data1', 'element2': 'data2'})])

    def test_multiple_simple_sections (self):
        """
        Two sections with simple data.
        """
        infile = self.testdir + "/008_multiple_simple_sections.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.data(), [('section5', {'element1': 'data1', 'element2': 'data2'}),
                                         ('section6', {'element3': 'data3', 'element4': 'data4'})])

    def test_section_with_lists (self):
        """
        A section containing lists of strings
        """
        infile = self.testdir + "/009_section_with_lists.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.data(), [('section8', {'element8':  ['data1', 'data2', 'data3'],
                                                       'element9':  ['data4', 'data5'],
                                                       'element10': ['data6']})])

    def test_single_variable (self):
        """
        File with one single variable assignment. Variables are stored in the 'variables' element
        of self._data
        """
        infile = self.testdir + "/010_single_variable.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.variables(), {'some_variable': 'data10'})

    def test_single_variable_list (self):
        """
        File with one single variable assignment of a string list.
        """
        infile = self.testdir + "/011_single_variable_list.bp"
        soong = Soong()
        soong.parse (infile)
        self.assertEqual (soong.variables(), {'variable_2': ['data1', 'data2']})

if __name__ == "__main__":

    if len (sys.argv) == 2 and sys.argv[1] == 'test':
        suite = unittest.TestLoader().loadTestsFromTestCase(TestSoong)
        unittest.TextTestRunner().run(suite)
        sys.exit (0)

    parser = argparse.ArgumentParser (description = 'Translate soong files to make statements')
    parser.add_argument ('--verbose', help='Verbose output', action='store_true')
    parser.add_argument ('--basedir', help='Base directory', action='store', required=True)
    parser.add_argument ('--output',  help='Write result to file', action='store', required=True)
    parser.add_argument ('--prefix',  help='Prepend prefix to variables', action='store', default='')
    parser.add_argument ('--include', help='Directory to load Android.bp from', action='append', required=True)
    parser.add_argument ('queries',   help='Query data from soong file', nargs='+')
    args = parser.parse_args()

    soong = Soong (args.basedir)
    for bp in args.include:
        soong.parse (bp)

    with open (args.output, 'w') as f:
        for q in args.queries:
            query = SoongQuery (q)
            f.write (repr(soong[query]))

