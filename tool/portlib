#!/usr/bin/env python3
# pylint: disable=missing-docstring

from pathlib import Path
import argparse

class ComponolitRootNotFound(Exception):
    pass
class LibraryExists(Exception):
    pass

def check_dir():

    if not Path("lib/mk/android.inc").exists():
        raise ComponolitRootNotFound("Must be executed from withing Componolit directory")

class Port:

    def __init__(self, libname, force):

        self.__libname = libname

        check_dir()
        if not force:
            self.check_name()

    def check_file(self, path, error):

        check_path = path % (self.__libname)
        if Path(check_path).exists():
            raise LibraryExists(error + " (" + check_path + ")")

    def check_name(self):

        self.check_file("ports/%s.port", "Library port file exists")
        self.check_file("ports/%s.hash", "Library hash file exists")
        self.check_file("lib/mk/%s.mk", "Library mk file exists")
        self.check_file("lib/import/import-%s.mk", "Library import file exists")

    def create(self, reponame, repodir, repopath):

        with open('ports/%s.port' % (self.__libname), 'w') as filehandle:
            filehandle.write('LICENSE   := Apache_2.0\n')
            filehandle.write('VERSION   := git\n')
            filehandle.write('DOWNLOADS := %s.git\n\n' % (reponame))
            filehandle.write('URL(%s) := https://android.googlesource.com/platform/%s\n' % \
                (reponame, repopath))
            filehandle.write('DIR(%s) := %s\n' % (reponame, repodir))
            filehandle.write('REV(%s) := master\n' % (reponame))

        with open('ports/%s.hash' % (self.__libname), 'w') as filehandle:
            filehandle.write('dummy\n')

        with open('lib/mk/%s.mk' % (self.__libname), 'w') as filehandle:
            filehandle.write('ANDROID_PORT = %s\n' % (self.__libname))
            filehandle.write('ANDROID_DIR = %s\n' % (repodir))
            filehandle.write('ANDROID_SECTIONS = /cc_library[@name=%s]\n\n' % (self.__libname))
            filehandle.write('include $(call select_from_repositories,lib/mk/android-lib.inc)\n')

        with open('lib/import/import-%s.mk' % (self.__libname), 'w') as filehandle:
            filehandle.write('ANDROID_LIB := %s' % (self.__libname))
            filehandle.write \
                ('include $(call select_from_repositories,lib/import/import-android.inc)')

if __name__ == "__main__":

    PARSER = argparse.ArgumentParser(description='Port an Android library')
    PARSER.add_argument('-l', '--lib', help='Library name', action='store', required=True)
    PARSER.add_argument('-r', '--reponame', help='Name of git repository',
                        action='store', required=True)
    PARSER.add_argument('-d', '--repodir', help='Source directory within Git repository',
                        action='store', required=True)
    PARSER.add_argument('-p', '--repopath', help='Path in git URL relative to ' + \
                        'https://android.googlesource.com/platform/',
                        action='store', required=True)
    PARSER.add_argument('-f', '--force', help='Overwrite existing files', action='store_true')
    ARGS = PARSER.parse_args()

    PORT = Port(ARGS.lib, ARGS.force)
    PORT.create(ARGS.reponame, ARGS.repodir, ARGS.repopath)
