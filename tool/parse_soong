#!/usr/bin/env python3

import sys
import pprint
import argparse
from pyparsing import *

def make_error (message):
    print ("$(error " + sys.argv[0] + ": " + message + ")")

class QueryParser:

    def queryAction (self, string, location, tokens):
        self.section = tokens[0]

    def __init__ (self, data, query):

        self.section = None
        self.data    = ""

        colon       = Literal (':')
        name        = Word (alphanums + "_")

        self.query = name + colon
        self.query.setParseAction (self.queryAction)

        self.query.parseString (query[0])

        section_found = False
        for d in data:
            for section in d.keys():
                if section == self.section:
                    self.data += str(d[section])
                    section_found = True

        if not section_found:
            raise Exception ("No section found")

        print (self.data)

class SoongParser:

    def stringListAction (self, string, location, tokens):
        last = -2 if tokens[-2] == ',' else -1
        return [tokens[1:last]]

    def stringListJoinAction (self, string, location, tokens):
        result = tokens[0]
        if len(tokens) == 2:
            result += tokens[1]
        return result

    def dictelemAction (self, string, location, tokens):
        return {tokens[0]: tokens[2:]}

    def variableAction (self, string, location, tokens):
        self.variables[tokens[0]] = [tokens[2:]]

    def rnameAction (self, string, location, tokens):
        varname = tokens[0]
        if not varname in self.variables:
            raise Exeception ("Error: %s: Variable '%s' no found" % (self.file, varname))
        return self.variables[varname]

    def dictionaryAction (self, string, location, tokens):
        result = {}
        last = -2 if tokens[-2] == ',' else -1
        for token in tokens[1:last]:
            result.update (token)
        return result

    def soongAction (self, string, location, tokens):
        self.data = tokens

    def __init__ (self, basedir):

        self.variables = {}
        self.file = None
        self.data = None

        self.basedir = basedir

        comma   = Literal (',')
        colon   = Literal (':')
        equals  = Literal ('=')
        true    = Literal ('true').setParseAction (lambda v : True)
        false   = Literal ('false').setParseAction (lambda v : False)
        name    = Word (alphanums + "_")

        # Variable reference
        rname = Word (alphanums + "_")
        rname.setParseAction (self.rnameAction)

        # Boolean literal true/false
        boolean     = true | false

        # String
        string     = QuotedString ('"', escChar='\\')
        stringjoin = delimitedList (string, delim='+')

        # List of strings
        stringlist     = Literal ("[") + Optional (delimitedList (stringjoin)) + Optional (comma) + Literal ("]")
        stringlist.setParseAction (self.stringListAction)

        stringlistjoin = delimitedList (stringlist|rname, delim='+')
        stringlistjoin.setParseAction (self.stringListJoinAction)

        # Dictionary
        dictelem    = Forward()
        dictelem.setParseAction (self.dictelemAction)

        dictionary  = Literal ("{") + Optional (delimitedList (dictelem)) + Optional (comma) + Literal ("}")
        dictionary.setParseAction (self.dictionaryAction)

        # Element
        element   = boolean | stringlistjoin | rname | stringjoin | dictionary

        dictelem << name + (colon|equals) + element

        block = name + element
        block.setParseAction (lambda s, l, t: {t[0]: t[1]})

        variable = name + Literal ("=") + element
        variable.setParseAction (self.variableAction)

        extension   = name + Literal ("+=") + element

        self.grammar = ZeroOrMore (block | variable.suppress() | extension) + StringEnd()
        self.grammar.setParseAction (self.soongAction)

        # C and C++ style comments
        self.grammar.ignore (cppStyleComment | cStyleComment)

    def parse (self, subdirs):
        for subdir in subdirs:
            self.grammar.parseFile (self.basedir + "/" + subdir + "/Android.bp")

    def query (self, query):
        q = QueryParser (self.data, query)

parser = argparse.ArgumentParser (description = 'Translate soong file to make statements')
parser.add_argument ('--verbose', help='Verbose output')
parser.add_argument ('--basedir', help='Base directory', action='store', required=True)
parser.add_argument ('--include', help='Directory to load Android.bp from', action='append')
parser.add_argument ('query', nargs=argparse.REMAINDER)
args = parser.parse_args()

try:
    soong = SoongParser (args.basedir)
    soong.parse (args.include)
    soong.query (args.query)
except ParseException as e:
    print ("Parse error in %s: %s" % (arg, str(e)))
except Exception as e:
    make_error (e.__class__.__name__ + ": " + str(e))
    if args.verbose: raise
