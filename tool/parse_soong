#!/usr/bin/env python3

import sys
import pprint
import argparse
from pyparsing import *
from pathlib import Path

colon  = Literal (':')
name   = Word (alphanums + "_")
equals = Literal ('=')


def make_error (message):
    print ("$(error " + sys.argv[0] + ": " + message + ")\n")

class Attr:

    def __init__ (self, name, value):
        self._name  = name
        self._value = value

    def __repr__ (self):
        return "[@" + self._name + "=" + self._value + "]"

    def name (self):
        return self._name

    def value (self):
        return self._value

class NullAttr:

    def __repr__ (self):
        return ""

class Subquery:

    def __init__ (self, name, attr = NullAttr()):
        self._name = name
        self._attr = attr

    def __repr__ (self):
        return "/" + self._name + repr(self._attr)

    def name (self):
        return self._name

    def attr (self):
        if isinstance (self._attr, NullAttr):
            return None
        return self._attr

class QueryError (Exception): pass
class InputError (Exception): pass

class SoongQuery:

    def attributeAction (self, string, location, tokens):
        return Attr (tokens[0], tokens[1])

    def subqueryAction (self, string, location, tokens):
        attribute = tokens[1] if len(tokens) > 1 else NullAttr()
        return Subquery (tokens[0], attribute)

    def __init__ (self, query_text, prefix = ""):

        self.prefix = prefix
        self.query_text = query_text

        slash    = Literal ('/')
        lbrak    = Literal ('[')
        rbrak    = Literal (']')
        at       = Literal ('@')
        asterisk = Literal ('*')

        attribute = Suppress(lbrak + at) + name + Suppress(equals) + name + Suppress(rbrak)
        attribute.setParseAction (self.attributeAction)

        subquery = Suppress(slash) + (name|asterisk) + Optional(attribute)
        subquery.setParseAction (self.subqueryAction)

        query = OneOrMore(subquery) + StringEnd()
        self.query = query.parseString (query_text)

    def __getitem__ (self, pos):
        return self.query[pos]

    def __repr__ (self):
        return self.query_text

def merge_dict (left, right):

    for elem in right:

        if elem == 'name': continue
        if elem == 'defaults': continue

        # Just copy entries not present in result dict
        if not elem in left:
            left[elem] = right[elem]
            continue

        relem = right[elem][0]
        lelem = left[elem][0]

        if type(lelem) != type(relem):
            raise InputError ("Incompatible elements in defaults section")

        if isinstance (lelem, list):
            lelem.extend (relem)
            continue

        if isinstance (lelem, bool):
            lelem = relem
            continue

        if isinstance (lelem, dict):
            lelem = merge_dict (lelem, relem)
            continue

        raise Exception ("Unhandled element " + elem + " type=" + str(type(lelem)))

    return left

class NamedElem:

    def __init__ (self, name, data = [{}]):
        self._name = name
        self._data = data

    def __getitem__ (self, sq):
        data = self.data()
        if sq.name() == '*' or sq.name() == self.name():
            if sq.attr() == None:
                return None
            attr_name = sq.attr().name()
            attr_val  = sq.attr().value()
            if attr_name in data[0] and attr_val in data[0][attr_name]:
                return data[0]
        return None

    def __contains__ (self, subquery):
        result = self[subquery]
        return result != None

    def __add__ (self, obj):

        left  = self.data()[0]
        right = obj.data()[0]
        result = merge_dict (left, right)

        return NamedElem (self.name(), [result])

    def __repr__ (self):

        result  = ""
        section = self.data()[0]

        for name in section:

            elem = section[name][0]

            # Store section name and continue
            if name == "name": continue

            # Skip sub-entries
            if not isinstance (elem, list): continue

            result += name.upper() + " += " + " ".join (elem) + "\n"

        return result

    def name (self):
        return self._name

    def data (self):
        return self._data

class SoongParser:

    def stringListAction (self, string, location, tokens):
        last = -2 if tokens[-2] == ',' else -1
        return [tokens[1:last]]

    def stringListJoinAction (self, string, location, tokens):
        result = tokens[0]
        if len(tokens) == 2:
            result += tokens[1]
        return [result]

    def dictelemAction (self, string, location, tokens):
        return NamedElem (tokens[0], tokens[2:])

    def elementAction (self, string, location, tokens):
        return tokens

    def blockAction (self, string, location, tokens):
        return NamedElem (tokens[0], tokens[1:])

    def variableAction (self, string, location, tokens):
        self.variables[tokens[0]] = tokens[2]

    def extensionAction (self, string, location, tokens):
        print ("WARNING: Extension not supported: " + str(tokens))

    def rnameAction (self, string, location, tokens):
        varname = tokens[0]
        if not varname in self.variables:
            raise Exception ("Error: %s: Variable '%s' no found" % (self.file, varname))
        return self.variables[varname]

    def sectionAction (self, string, location, tokens):
        result = {}
        last = -2 if tokens[-2] == ',' else -1
        for token in tokens[1:last]:
            result[token.name()] = token.data()
        return result

    def soongAction (self, string, location, tokens):
        self._data.extend (tokens)

    def __init__ (self, basedir):

        self.variables = {}
        self._data = []

        self.basedir = basedir

        comma   = Literal (',')
        true    = Literal ('true').setParseAction (lambda v : True)
        false   = Literal ('false').setParseAction (lambda v : False)

        # Variable reference
        rname = Word (alphanums + "_")
        rname.setParseAction (self.rnameAction)

        # Boolean literal true/false
        boolean     = true | false

        # String
        string     = QuotedString ('"', escChar='\\').setParseAction (lambda s, l, t: t[0])
        stringjoin = delimitedList (string, delim='+')

        # List of strings
        stringlist     = Literal ("[") + Optional (delimitedList (stringjoin)) + Optional (comma) + Literal ("]")
        stringlist.setParseAction (self.stringListAction)

        stringlistjoin = delimitedList (stringlist|rname, delim='+')
        stringlistjoin.setParseAction (self.stringListJoinAction)

        # Dictionary
        dictelem    = Forward()
        dictelem.setParseAction (self.dictelemAction)

        section = Literal ("{") + Optional (delimitedList (dictelem)) + Optional (comma) + Literal ("}")
        section.setParseAction (self.sectionAction)

        block = name + section
        block.setParseAction (self.blockAction)

        # Element
        element   = boolean | string | rname | stringlist | stringlistjoin | stringjoin | section
        element.setParseAction (self.elementAction)

        dictelem << name + (colon|equals) + element

        variable = name + Literal ("=") + element
        variable.setParseAction (self.variableAction)

        extension = name + Literal ("+=") + element
        extension.setParseAction (self.extensionAction)

        self.grammar = ZeroOrMore (block | Suppress (variable) | Suppress (extension)) + StringEnd()
        self.grammar.setParseAction (self.soongAction)

        # C and C++ style comments
        self.grammar.ignore (cppStyleComment | cStyleComment)

    def parse (self, subdirs):
        for subdir in subdirs:
            bp = Path (self.basedir + "/" + subdir + "/Android.bp")
            if not bp.is_file():
                raise Exception ("File " + str(bp) + " does not exist")
            self.grammar.parseFile (bp.open())

    def __getitem__ (self, subquery):

        sections = [sec for sec in self._data if subquery[0] in sec] 
        if len(sections) != 1:
            raise QueryError ("Ambigous query: " + str(subquery))

        section = sections[0]
        data    = section.data()[0]

        depsec = NamedElem (section.name())
        if 'defaults' in data:
            for default in data['defaults'][0]:
                depquery = SoongQuery ("/*[@name=" + default + "]")
                depsec += self[depquery]

        result = depsec + section

        for query in subquery[1:]:
            print (str(result))
            print ("sq: " + str(query.name()))
            print ("rt: " + str(type(result)))
            if not query.name() in result.data()[0]:
                raise QueryError ("NOT FOUND: " + str(query))
            result = result.data()[0][query.name()][0]

        return result

if __name__ == "__main__":
    parser = argparse.ArgumentParser (description = 'Translate soong file to make statements')
    parser.add_argument ('--verbose', help='Verbose output', action='store_true')
    parser.add_argument ('--basedir', help='Base directory', action='store', required=True)
    parser.add_argument ('--prefix',  help='Prepend prefix to variables', action='store', default='')
    parser.add_argument ('--include', help='Directory to load Android.bp from', action='append', required=True)
    parser.add_argument ('query',     help='Query data from soong file')
    args = parser.parse_args()

    try:
        soong = SoongParser (args.basedir)
        soong.parse (args.include)

        query = SoongQuery (args.query, args.prefix)
        print (soong[query])

    except Exception as e:
        make_error (e.__class__.__name__ + ": " + str(e))
        if args.verbose: raise
